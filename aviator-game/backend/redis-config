const createSecureRedisClient = () => {
  const client = createClient({
    url: 'rediss://red-cujq3a8gph6c73bkch8g.redis.oregon-redi.render.com:6379',
    username: 'red-cujq3a8gph6c73bkch8g',
    password: 'pMOWloiozT4sXTlVJrpwplMd3pzUBrtj',
    socket: {
      tls: true,
      rejectUnauthorized: true, // Verify SSL certificate
      connectTimeout: 10000,
      reconnectStrategy: (retries) => {
        if (retries > 10) {
          console.error('Redis connection failed after 10 retries');
          return new Error('Redis connection failed');
        }
        return Math.min(2 ** retries * 100, 3000);
      }
    }
  });

  // Comprehensive error handling
  client.on('error', (err) => {
    console.error('Redis Client Error:', err);
    if (err.message.includes('AUTH')) {
      console.error('Authentication failed. Please check credentials and IP allowlist.');
    }
    if (err.message.includes('ECONNREFUSED')) {
      console.error('Connection refused. Please check if Redis is running and the port is correct.');
    }
    if (err.message.includes('ETIMEDOUT')) {
      console.error('Connection timed out. Please check network connectivity and firewall rules.');
    }
  });

  client.on('connect', () => {
    console.log('Redis Client Connected');
  });

  client.on('reconnecting', () => {
    console.log('Redis Client Reconnecting...');
  });

  return client;
};

export const initializeRedis = async () => {
  const client = createSecureRedisClient();

  try {
    await client.connect();

    // Test the connection
    const pingResult = await client.ping();
    console.log('Redis connection test successful:', pingResult);

    // Optional: Test a basic operation
    await client.set('test_key', 'test_value');
    const testValue = await client.get('test_key');
    console.log('Redis write/read test successful:', testValue);

    return client;
  } catch (error) {
    console.error('Failed to initialize Redis:', error);

    if (error.message.includes('Client IP address is not in the allowlist')) {
      console.error(`
        Your current IP address is not in the allowed list.
        Please add your IP to the allowlist in your Redis dashboard.
        Currently allowed IPs:
        - 102.0.1.152/32
        - 41.89.10.241/32
      `);
    }

    throw error;
  }
};
